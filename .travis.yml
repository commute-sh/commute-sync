sudo: required
dist: trusty
language: node_js
node_js:
- '7'
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    - llvm-toolchain-precise-3.6
    packages:
    - gcc-4.8
    - g++-4.8
    - clang-3.6
cache:
  directories:
  - node_modules
services:
- docker
before_install:
- sudo apt-get update -q
- sudo apt-get remove redis-server -y
- sudo rm -rf /var/lib/redis
- sudo apt-get install python-software-properties -y
- sudo apt-get install software-properties-common -y
- sudo apt-add-repository ppa:chris-lea/redis-server -y
- sudo apt-get update -q
- sudo apt-get install redis-server -y
- sudo apt-get install redis-tools -y
- sudo service redis-server start
- redis-cli ping
- redis-cli set test 'success'
- redis-cli get test
install:
- npm install
script:
- npm run test
notifications:
  slack:
    secure: vyXsVpPNXEhkrDriqYqaKb6Dm0jsokdhOglEASA8RPuVpSI4yXHn1YmK2ReWsLPYMA7igH5/tFJEfAhv/BcdIIJAVWUSFRFTY00LD3PRY3q72/K6B2BWECPk9NAa3OondlIHo8CNNXb02TOwNjI3VwGpls1q2/Q7YFsVibIwv3DOhxKKcW0ESyVl59VrR8vu/tXQXwEyNImerBExlY+hRn3U7TsGdiznm7RFSmKELF6FvqArwRhvXI4+l8AQ2ByCvFo45jlzyn3qOBEM6j+sKp5B39N++2UPKKJbW/7YKAuEigCY6YSZ3EOI/WiMYOie+16wj5/yWB6Hcc+B7xuUbk+LRt9HlXM6RkBy087/lkSoVXAAkUq3qxxJjS/bSfDoKwgG9RHhLM1RUA1kot0fRVgNdY+bJ3p0wjUBgOV1KX420hvIDj3cyrfvlQtleIvjrTi0kFJ2Kz7kYCzkuTwzU0Y+rHMXbo6E41rJ17nRPpqIY1Ef2zT6Bwa8YsMbjsl9IMMYzSD8j4AL5T2UAH/F4v6QnEFnNiBpf0InNQQGvAzs9oUtHxa8jNxxK6x8t+rxTyNAvaTe/iAuoPng8lcShRaYD/Tf1nMxPRi7uNjOvOdF1+RgOSV28yv2iID/ItXgw7u8wzUfiuX++GtufevzCUOE+IEgx5v4vEeYa/1EgDM=
after_success:
- docker login --email=$DOCKER_HUB_EMAIL --username=$DOCKER_HUB_USERNAME --password=$DOCKER_HUB_PASSWORD
- export TAG=`if [ "$TRAVIS_TAG" == "master" ]; then echo "latest"; else echo $TRAVIS_BRANCH
  ; fi`
- docker build -f Dockerfile -t $DOCKER_IMAGE_NAME .
- if [ ! -z "$TRAVIS_TAG" ]; then docker tag $DOCKER_IMAGE_NAME:latest $DOCKER_IMAGE_NAME:$TRAVIS_TAG;
  fi && docker push $DOCKER_IMAGE_NAME
env:
  global:
  - secure: tib5Fwr6JbiBq9xHiwKtl2eywHsHT2wlg84EXY0nUOj9GLgi5P7axGVePUDImYXVskfJY4npEu0aPr48RcRedE8j4sskvEx9YOGh2omtLpefAMNLklBq1jnOSsOgNXXuCLWWyOHJlpWrepdBD4csksv+gs+05+Zxa8mCEqKyS4SsweTLlglFYGqX6vkOMF1ZEo962pksk8KjNp0OQ8202ULvH1CUFrVwhNjGDRRxI5kxouXCKQeqmxLs2f+8A8zXvQPMZ7wrXjIR1ez5bQTbIvj7ookOYsSNA8WndyoQ+p5hEFII0R2Bxvx/0I8e6WGRRkEXasxpCkASyi3Ta6EAG5TvWK5yI7C7SdM300xU7e4RD/+h7IsaWOanfR5Ag2zM6pXkUWNmAAceZIIt6ErhZepQpwMmEOoVu8Bb5vY3lp6zDDpNIlmhUOIj8Mj0hZK+FOuXJvmcpoTAhRla/0/T06F1cDeLaYcH7V+XU2w0lkHe7f5qo9ExTYQgnKnzRnCYrzfLRPOJLFg/yNlOf/bRs7Ki9Moh5+GokflTf6xVCh9tdmXYTsT1i7a4J4s7jYWU5N6gHKNgpeXJWmaJQcwERM8ViHzoTwvFaNb9trd3TZu04P0Ca1R/OOqa9JIFvTvtHjt/nvlgPByl/wpfrE0TVRbl4YIHthGQ/ipWuydLk4c=
  - secure: RdG54yfQXJghT3tNtnhc8XbVCPfZwYYG8E22P6FM24Wvws86d/IbihQLfeaNNVZDsYKE17Oe3oWeagUsBu5ZnHI9IWl9gA4iNkvWadyjXoznYokL0DJ0oPlk6ULEKYjwZXrurQco/vtXCO94N9VdBTuzL6z8209mcc48hGPnV32TIWoxGbwBbo5mGsYdDLYA+U3Gy6D8K0VrdIXOwqwSSJC+waF6+P/8pmG4cl5EJWux0VJ573USXGBbgq3rUV6/bhZkmn2XB50qpqlH1WVGZbZDSsTIlW1jTHaP3pWw6DRHDarZWtlwykml9mnGWId+6ZgfM3GPD/qQL4G7aUjnqPdbAH2xxYJMdVxXByB1zlpwunvdlu4hOgcPMoffPjLuJ8f+OaORKfvVue7whWHTltP4/lOpimIt0lJILU+2kcKYklHlEXQby7MYdM3nrPyEwYj++kxwRGBU7kmvv5CfbhPfkN7F2iLH9ARSVD5mnXybXrjJLRvj/EwIzH1yBuIn6+bdwXslIs9+BSThRo70CU0dIN6BeB9B92T6oyqz6EEfK8EJK7Uw64v6qrLa7pdePJxkc8qOPyD8M9Q2IvTD6nNzjpl+WGQWeVls8SvtOalLM2kXG+eL+u8Tf5Qfy3l76xKmNjhJdJ+2vZQp4uyrVxjkQ6G2YfJq+MKRalzNd9I=
  - secure: RBptQWiy1xz1MVqUo3jntqqoZIaaTKMu3S+h8NPnOX7rg+LyiyGEvlga2dxwIFhblM3UE8DHWounokqacMHve0uUlH3IiV76nr0P1UYXtOQaY7OUlRt+glZH0LfKy8ewn1YHUWHBFW3baiwGt+jeuwsZ/voLjM2PF4BSWFe/D8f7UYQTpimqNpvpwzgrqepfeTp4KlktULffWx8b9zTXYCBavwy3FkTy1hra8/Y44YJbA1CUW7TnZiTuX6HJoodZl9QIsWbz4xVzC2Z/zdoKm0w8ukTURYdp7l4NQ1L5gZQ7ZI+3A+chqStV+jf7qg5eQddZCeFzANQvsRoBN3/dP9Vyrry0dRcPgLYl0lxCPH6YJBxBIRnab36hsWJhK9nCXtcLhzHZHEPApqiM6VDdHZf61pB8mwapNTNG50ZU39X6MahXQgPfi6PvTgu3dFZ+Z09+dNxgLlVC9tOPRtRtbUZE1ssO9z0wHP6RkuNcv0zucrAfqnNebTxzxmDeNaOYSY+3O5Bg67DyXgD5qMwa32VHrQFkDV79BE5Sn/ohxYLfJrep6bRZf7E5tnlH3citWBLnhaHkAvVOxUCRsw8yH/JIhdqWrkEWUvv1eGsXBRdDaRdRM8wFTXZiLQ7L3XZigxwsFJQz+u9cWgRwX8RWBA1So16/QCS8NZNcuwrAVuM=
  - secure: rOFNTYaY83DtSyGuvK3gzwgbgDwzrxuBiqvoxuPUealmxxuMhlMH9OLBgHrfPZZAsPjOeSw9yd03HMHSb8camHgkAcwFyqcrWq16MaIL1n0r6QObfQR7bTlcXGWgqStH6y7el8DlK2mf+fh51guda4CyH0UMceIBtaT5IydgLpzCZOzPKAvTyXHgRMbm3yUoq03IMEpldeFM3N8z2rWfzSHIpihrKO/Z+lnqP4eAbP6dpwN1M9CIKCnEYugjNPkRwop24Ni3uREAB3TLadQgvlVpdnGPL/2OHJo1mgKUooBK4t5bGnWybEn533/jkcA+C2KwFZY+lRGCpOSdq5fDI9Ve+Sh5CScOqzm+gKutkYsC7cVr6YrV15o6ur+D2fYlHxacgExHNz0uOrTrYam6fQFnZ99Bth5wJH0+LBz3KH63TC1bCnL/wPSRNHlpD7aruID8zU0SLoEMEeVmm/6MP+sNugKw44quUbfGlI7owdRIS/4JFY6zbEx9j7Kah2rxN3NC1vPC00XBdinOaz+y07lMFus66aNdo3oSKJD4R5Ku1BoQXXDSK38irXr0xYy+XWeOlOEWdbkjn32noXzqbXsX3UlhKQY5tQwILWSh2VatbaDFBigLwNWS2wTGKvRjl9E5T4myoIY019sL7StpSxrEgqgIxGO9DMgRxgMTKLk=
